{"name": "test_openapp_tc_01", "status": "broken", "statusDetails": {"message": "PermissionError: [Errno 13] Permission denied: 'test_results.xlsx'", "trace": "appium_driver = <appium.webdriver.webdriver.WebDriver (session=\"8c14aa76-5431-4852-ad18-e5c98e19861a\")>, excel_results = None\n\n    @staticmethod\n    def test_openapp_tc_01(appium_driver,excel_results):\n        try:\n            main.TestAppiumAutomation.test_click_docile_delivery_element(appium_driver)\n            time.sleep(7)\n            screenshot_name = f\"test_openapp_tc_01.png\"\n            allure.attach(appium_driver.get_screenshot_as_png(), name=\"Screenshot\",\n                          attachment_type=allure.attachment_type.PNG)\n            appium_driver.save_screenshot(screenshot_name)\n    \n            assert True  # Example assertion\n            result = \"Pass\"\n            function_name = inspect.stack()[0][3]\n            test_id = function_name.split(\"_\")[-1]\n            screenshot_hyperlink = f'=HYPERLINK(\"{screenshot_name}\", \"Screenshot\")'\n            ws.append([f\"TC-{test_id}\", function_name, result, screenshot_hyperlink])\n>           wb.save(\"test_results.xlsx\")\n\naccount.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: in save\n    save_workbook(self, filename)\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>, file = 'test_results.xlsx', mode = 'w', compression = 8, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'test_results.xlsx'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1281: PermissionError"}, "attachments": [{"name": "Screenshot", "source": "57f4bd00-ae03-46ce-a502-a20aa7c6794e-attachment.png", "type": "image/png"}], "start": 1707286329653, "stop": 1707286339200, "uuid": "1c72fd2a-a881-4509-b560-deed973a3e88", "historyId": "c441b20dac86a25a2abe2d8b7b6dd576", "testCaseId": "c441b20dac86a25a2abe2d8b7b6dd576", "fullName": "account.Testorderpage#test_openapp_tc_01", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('appium_driver', 'excel_results')"}, {"name": "suite", "value": "account"}, {"name": "subSuite", "value": "Testorderpage"}, {"name": "host", "value": "DESKTOP-21PTCEL"}, {"name": "thread", "value": "8844-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "account"}]}