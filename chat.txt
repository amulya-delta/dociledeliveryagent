import time

import pytest
import request
import inspect
from appium import webdriver
from appium.options.common.base import AppiumOptions
from pages import main
from selenium.common.exceptions import TimeoutException
import allure
from openpyxl import Workbook, load_workbook
# Load the existing Excel workbook
wb = load_workbook("test_results.xlsx")
ws = wb.active
# Define a fixture to save the workbook after the tests have run
@pytest.fixture(scope="session")
def excel_results(request):
    def fin():
        wb.save("test_results.xlsx")
        wb.close()

    request.addfinalizer(fin)
# Define a fixture to open the appium driver
# @pytest.fixture(scope="module")
# def appium_driver():
#     options = AppiumOptions()
#     options.load_capabilities({
#     "platformName": "Android",
#     "deviceName": "RZ8R21SMYNN",
#     })
#     driver = webdriver.Remote("http://127.0.0.1:4723/wd/hub", options=options)
#     yield driver
#     driver.quit()

@pytest.fixture(scope="module")
def appium_driver():
    options = AppiumOptions()
    options.load_capabilities({
        "platformName": "Android",
        "deviceName": "RZ8R21SMYNN",
        # Add other desired capabilities as needed
    })
    # Add other desired capabilities as needed

    driver = webdriver.Remote("http://127.0.0.1:4723/wd/hub", options=options)
    yield driver
    # driver.quit()


@pytest.mark.usefixtures("appium_driver","excel_results")
class Testorderpage:
    @staticmethod
    def test_openapp_tc_01(appium_driver,excel_results):
        try:
            main.TestAppiumAutomation.test_click_docile_delivery_element(appium_driver)
            time.sleep(7)
            screenshot_name = f"test_openapp_tc_01.png"
            # allure.attach(appium_driver.get_screenshot_as_png(), name="Screenshot",
            #               attachment_type=allure.attachment_type.PNG)
            appium_driver.save_screenshot(screenshot_name)

            assert True  # Example assertion
            result = "Pass"
            function_name = inspect.stack()[0][3]
            test_id = function_name.split("_")[-1]
            screenshot_hyperlink = f'=HYPERLINK("{screenshot_name}", "Screenshot")'
            ws.append(
                [f"TC-{test_id}", function_name, result, screenshot_hyperlink, "None", "None", "open the docile app",
                 "As Expected", "APK", "None"])
            wb.save("test_results.xlsx")
            wb.save("test_results.xlsx")
        except TimeoutException:
            result = "Fail"
            screenshot_name = f"test_openapp_tc_01.png"
            # allure.attach(appium_driver.get_screenshot_as_png(), name="Screenshot",
            #               attachment_type=allure.attachment_type.PNG)
            appium_driver.save_screenshot(screenshot_name)
            function_name = inspect.stack()[0][3]
            test_id = function_name.split("_")[-1]
            screenshot_hyperlink = f'=HYPERLINK("{screenshot_name}", "Screenshot")'
            ws.append([f"TC-{test_id}", function_name, result, screenshot_hyperlink, "High", "Try using ID or Xpath",
                       "open docile App", "Not opening", "APK", "it's not clicking the app icon"])
            wb.save("test_results.xlsx")
###############################################################################################################################
    def test_yestologin_tc_02(self,appium_driver):
        try:
            main.TestAppiumAutomation.test_pressyes(self,appium_driver)
            time.sleep(7)
            screenshot_name = f"test_openapp_tc_02.png"
            # allure.attach(appium_driver.get_screenshot_as_png(), name="Screenshot",
            #               attachment_type=allure.attachment_type.PNG)
            appium_driver.save_screenshot(screenshot_name)

            assert True  # Example assertion
            result = "Pass"
            function_name = inspect.stack()[0][3]
            test_id = function_name.split("_")[-1]
            screenshot_hyperlink = f'=HYPERLINK("{screenshot_name}", "Screenshot")'
            ws.append(
                [f"TC-{test_id}", function_name, result, screenshot_hyperlink, "None", "None", "YES to login",
                 "As Expected", "APK", "None"])
            wb.save("test_results.xlsx")

        except TimeoutException:
            result = "Fail"
            screenshot_name = f"test_openapp_tc_02.png"
            # allure.attach(appium_driver.get_screenshot_as_png(), name="Screenshot",
            #               attachment_type=allure.attachment_type.PNG)
            appium_driver.save_screenshot(screenshot_name)
            function_name = inspect.stack()[0][3]
            test_id = function_name.split("_")[-1]
            screenshot_hyperlink = f'=HYPERLINK("{screenshot_name}", "Screenshot")'
            ws.append([f"TC-{test_id}", function_name, result, screenshot_hyperlink])
            wb.save("test_results.xlsx")

            function_name = inspect.stack()[0][3]
            test_id = function_name.split("_")[-1]
            ws.append([f"TC-{test_id}", function_name, result, screenshot_hyperlink, "High", "Try using ID or Xpath",
                       "YES to login", "Not opening", "APK", "it's not clicking the app icon"])


if __name__=="__main__":
    Testorderpage().test_openapp_tc_01()
    Testorderpage().test_yestologin_tc_02()